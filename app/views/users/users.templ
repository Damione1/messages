package users

import (
	"messages/app/views/layouts"
	"fmt"
	"messages/app/views/components/modal"
	"messages/app/views/components/inputField"
	v "github.com/anthdm/superkit/validate"
)

type UserListItem struct {
	ID        int64
	FirstName string
	LastName  string
	Email     string
	Role      string
}

type InvitationListItem struct {
	ID        int64
	Email     string
	InvitedBy string
}

type IndexPageData struct {
	UsersList      []*UserListItem
	InvitationList []*InvitationListItem
	FormValues     *UserFormValues
	FormErrors     v.Errors
}

templ Index(data *IndexPageData) {
	@layouts.App() {
		//create user button
		<div class="text-center flex flex-col justify-center items-center mt-10 lg:mt-10 mb-10">
			@component_modal.Modal(component_modal.ModalProps{
				OpenButtonTxt:   "Invite user",
				OpenButtonClass: "bg-blue-500 hover:bg-gray-700 bg-gray-50 light:bg-gray-200 dark:bg-gray-900 dark:text-gray-400 font-bold py-2 px-4 rounded",
				CloseButtonTxt:  "Close",
			}) {
				<form hx-post="/invitation" class="bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4" id="userForm" hx-target="#userForm" hx-swap="innerHTML">
					@UserForm(data.FormValues, data.FormErrors)
				</form>
			}
		</div>
		if len(data.InvitationList) > 0 {
			<h2 class="text-2xl font-semibold text-gray-700 dark:text-gray-400">Invitations</h2>
			@invitationsListing(data.InvitationList)
		}
		<h2 class="text-2xl font-semibold text-gray-700 dark:text-gray-400 mt-10">Users</h2>
		@usersListing(data.UsersList)
	}
}

templ invitationsListing(invitations []*InvitationListItem) {
	<div class="relative overflow-x-auto shadow-md sm:rounded-lg">
		<table class="w-full text-sm text-left rtl:text-right text-gray-500 dark:text-gray-400">
			<thead class="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400">
				<tr>
					<th scope="col" class="px-6 py-3">Email</th>
					<th scope="col" class="px-6 py-3">Invited by</th>
					<th scope="col" class="px-6 py-3">Actions</th>
				</tr>
			</thead>
			<tbody>
				for _, invitation := range invitations {
					@singleInvitation(invitation)
				}
			</tbody>
		</table>
	</div>
}

templ usersListing(users []*UserListItem) {
	<div class="relative overflow-x-auto shadow-md sm:rounded-lg">
		<table class="w-full text-sm text-left rtl:text-right text-gray-500 dark:text-gray-400">
			<thead class="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400">
				<tr>
					<th scope="col" class="px-6 py-3">First Name</th>
					<th scope="col" class="px-6 py-3">Last Name</th>
					<th scope="col" class="px-6 py-3">Email</th>
					<th scope="col" class="px-6 py-3">Role</th>
					<th scope="col" class="px-6 py-3">Actions</th>
				</tr>
			</thead>
			<tbody>
				for _, user := range users {
					@singleUser(user)
				}
			</tbody>
		</table>
		if len(users) == 0 {
			<p class="text-gray-500">No users</p>
		}
	</div>
}

templ singleUser(user *UserListItem) {
	<tr class="odd:bg-white odd:dark:bg-gray-900 even:bg-gray-50 even:dark:bg-gray-800 border-b dark:border-gray-700">
		<td class="px-6 py-4">{ user.FirstName }</td>
		<td class="px-6 py-4">{ user.LastName }</td>
		<td class="px-6 py-4">{ user.Email }</td>
		<td class="px-6 py-4">{ user.Role }</td>
		<td class="px-6 py-4">
			@component_modal.Modal(component_modal.ModalProps{
				OpenButtonTxt:  "Delete",
				CloseButtonTxt: "Cancel",
			}) {
				@DeleteUserConfirmationModal(user.ID, v.Errors{})
			}
		</td>
	</tr>
}

templ singleInvitation(invitation *InvitationListItem) {
	<tr class="odd:bg-white odd:dark:bg-gray-900 even:bg-gray-50 even:dark:bg-gray-800 border-b dark:border-gray-700">
		<td class="px-6 py-4">{ invitation.Email }</td>
		<td class="px-6 py-4">{ invitation.InvitedBy }</td>
		<td class="px-6 py-4">
			@component_modal.Modal(component_modal.ModalProps{
				OpenButtonTxt:  "Delete",
				CloseButtonTxt: "Cancel",
			}) {
				@DeleteInvitationConfirmationModal(invitation.ID, v.Errors{})
			}
		</td>
	</tr>
}

type UserFormValues struct {
	Email string `form:"email"`
}

templ UserForm(values *UserFormValues, errors v.Errors) {
	<div class="mb-4">
		@component_inputfield.InputField(&component_inputfield.InputFieldProps{
			Label:       "Email",
			Name:        "email",
			Value:       "",
			Placeholder: "example@email.com",
			Error:       "",
		})
		if errors.Has("email") {
			<div class="text-red-500 text-xs">{ errors.Get("email")[0] }</div>
		}
	</div>
	<button type="submit" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
		Invite user
	</button>
	if errors.Has("form") {
		<div class="text-red-500 text-xs">{ errors.Get("form")[0] }</div>
	}
}

templ DeleteUserConfirmationModal(userId int64, errors v.Errors) {
	<form hx-delete={ fmt.Sprintf("/user/%d", userId) } class="bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4" id={ fmt.Sprintf("deleteUserModal%d", userId) } hx-target={ fmt.Sprintf("#deleteUserModal%d", userId) } hx-swap="outerHTML">
		<p class="block text-gray-700 text-sm font-bold mb-2">Are you sure you want to delete this user?</p>
		<div class="flex items-center justify-between mt-4">
			<button type="submit" class="bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded text-center">Confirm delete</button>
		</div>
		if errors.Has("form") {
			<div class="text-red-500 text-xs">{ errors.Get("form")[0] }</div>
		}
	</form>
}

templ DeleteInvitationConfirmationModal(invitationId int64, errors v.Errors) {
	<form hx-delete={ string(fmt.Sprintf("/invitation/%d", invitationId)) } class="bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4" id={ fmt.Sprintf("deleteInvitationModal%d", invitationId) } hx-target={ fmt.Sprintf("#deleteInvitationModal%d", invitationId) } hx-swap="outerHTML">
		<p class="block text-gray-700 text-sm font-bold mb-2">Are you sure you want to delete this invitation?</p>
		<div class="flex items-center justify-between mt-4">
			<button type="submit" class="bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded text-center">Confirm delete</button>
		</div>
		if errors.Has("form") {
			<div class="text-red-500 text-xs">{ errors.Get("form")[0] }</div>
		}
	</form>
}
