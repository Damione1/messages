package users

import (
	"messages/app/views/layouts"
	"fmt"
	"messages/app/views/components/modal"
	"messages/app/views/components/inputField"
	v "github.com/anthdm/superkit/validate"
)

type UserListItem struct {
	ID        int64
	FirstName string
	LastName  string
	Email     string
	Role      string
}

type InvitationListItem struct {
	ID        int64
	Email     string
	InvitedBy string
}

type IndexPageData struct {
	UsersList      []*UserListItem
	InvitationList []*InvitationListItem
	FormValues     *UserFormValues
	FormErrors     v.Errors
}

templ Index(data *IndexPageData) {
	@layouts.App() {
		//create user button
		<div class="text-center flex flex-col justify-center items-center mt-10 lg:mt-10 mb-10">
			@component_modal.Modal(component_modal.ModalProps{
				OpenButtonTxt:   "Invite user",
				OpenButtonClass: "bg-blue-500 hover:bg-gray-700 bg-gray-50 light:bg-gray-200 dark:bg-gray-900 dark:text-gray-400 font-bold py-2 px-4 rounded",
				CloseButtonTxt:  "Close",
			}) {
				<form hx-post="/invite" class="bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4" id="userForm" hx-target="#userForm" hx-swap="innerHTML">
					@UserForm(data.FormValues, data.FormErrors)
				</form>
			}
		</div>
		<div class="relative overflow-x-auto shadow-md sm:rounded-lg">
			<table class="w-full text-sm text-left rtl:text-right text-gray-500 dark:text-gray-400">
				<thead class="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400">
					<tr>
						<th scope="col" class="px-6 py-3">First Name</th>
						<th scope="col" class="px-6 py-3">Last Name</th>
						<th scope="col" class="px-6 py-3">Email</th>
						<th scope="col" class="px-6 py-3">Role</th>
						<th scope="col" class="px-6 py-3">Actions</th>
					</tr>
				</thead>
				<tbody>
					for _, user := range data.UsersList {
						@SingleUser(user)
					}
				</tbody>
			</table>
			if len(data.UsersList) == 0 {
				<p class="text-gray-500">No users</p>
			}
		</div>
	}
}

templ SingleUser(singleUser *UserListItem) {
	<tr class="odd:bg-white odd:dark:bg-gray-900 even:bg-gray-50 even:dark:bg-gray-800 border-b dark:border-gray-700">
		<td class="px-6 py-4">{ singleUser.FirstName }</td>
		<td class="px-6 py-4">{ singleUser.LastName }</td>
		<td class="px-6 py-4">{ singleUser.Email }</td>
		<td class="px-6 py-4">{ singleUser.Role }</td>
		<td class="px-6 py-4">
			@DeleteConfirmationModal(singleUser.ID, v.Errors{})
		</td>
	</tr>
}

type UserFormValues struct {
	Email string `form:"email"`
}

templ UserForm(values *UserFormValues, errors v.Errors) {
	<div class="mb-4">
		@component_inputfield.InputField(&component_inputfield.InputFieldProps{
			Label:       "Email",
			Name:        "email",
			Value:       "",
			Placeholder: "example@email.com",
			Error:       "",
		})
		if errors.Has("email") {
			<div class="text-red-500 text-xs">{ errors.Get("email")[0] }</div>
		}
	</div>
	<button type="submit" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
		Invite user
	</button>
}

templ DeleteConfirmationModal(deleteUserID int64, errors v.Errors) {
	@component_modal.Modal(component_modal.ModalProps{
		OpenButtonTxt:  "Delete",
		CloseButtonTxt: "Cancel",
	}) {
		<form hx-delete={ string(fmt.Sprintf("/user/%d", deleteUserID)) } class="bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4" id="deleteForm" hx-target="#deleteForm" hx-swap="outerHTML">
			<p class="block text-gray-700 text-sm font-bold mb-2">Are you sure you want to delete this user?</p>
			<div class="flex items-center justify-between mt-4">
				<button type="submit" class="bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded text-center">Confirm delete</button>
			</div>
			if errors.Has("form") {
				<div class="text-red-500 text-xs">{ errors.Get("form")[0] }</div>
			}
		</form>
	}
}
