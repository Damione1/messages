// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// WebsitesMessage is an object representing the database table.
type WebsitesMessage struct {
	ID        int64 `boil:"id" json:"id" toml:"id" yaml:"id"`
	WebsiteId int64 `boil:"websiteId" json:"websiteId" toml:"websiteId" yaml:"websiteId"`
	MessageId int64 `boil:"messageId" json:"messageId" toml:"messageId" yaml:"messageId"`

	R *websitesMessageR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L websitesMessageL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var WebsitesMessageColumns = struct {
	ID        string
	WebsiteId string
	MessageId string
}{
	ID:        "id",
	WebsiteId: "websiteId",
	MessageId: "messageId",
}

var WebsitesMessageTableColumns = struct {
	ID        string
	WebsiteId string
	MessageId string
}{
	ID:        "websites_messages.id",
	WebsiteId: "websites_messages.websiteId",
	MessageId: "websites_messages.messageId",
}

// Generated where

var WebsitesMessageWhere = struct {
	ID        whereHelperint64
	WebsiteId whereHelperint64
	MessageId whereHelperint64
}{
	ID:        whereHelperint64{field: "\"websites_messages\".\"id\""},
	WebsiteId: whereHelperint64{field: "\"websites_messages\".\"websiteId\""},
	MessageId: whereHelperint64{field: "\"websites_messages\".\"messageId\""},
}

// WebsitesMessageRels is where relationship names are stored.
var WebsitesMessageRels = struct {
	MessageIdMessage string
	WebsiteIdWebsite string
}{
	MessageIdMessage: "MessageIdMessage",
	WebsiteIdWebsite: "WebsiteIdWebsite",
}

// websitesMessageR is where relationships are stored.
type websitesMessageR struct {
	MessageIdMessage *Message `boil:"MessageIdMessage" json:"MessageIdMessage" toml:"MessageIdMessage" yaml:"MessageIdMessage"`
	WebsiteIdWebsite *Website `boil:"WebsiteIdWebsite" json:"WebsiteIdWebsite" toml:"WebsiteIdWebsite" yaml:"WebsiteIdWebsite"`
}

// NewStruct creates a new relationship struct
func (*websitesMessageR) NewStruct() *websitesMessageR {
	return &websitesMessageR{}
}

func (r *websitesMessageR) GetMessageIdMessage() *Message {
	if r == nil {
		return nil
	}
	return r.MessageIdMessage
}

func (r *websitesMessageR) GetWebsiteIdWebsite() *Website {
	if r == nil {
		return nil
	}
	return r.WebsiteIdWebsite
}

// websitesMessageL is where Load methods for each relationship are stored.
type websitesMessageL struct{}

var (
	websitesMessageAllColumns            = []string{"id", "websiteId", "messageId"}
	websitesMessageColumnsWithoutDefault = []string{"websiteId", "messageId"}
	websitesMessageColumnsWithDefault    = []string{"id"}
	websitesMessagePrimaryKeyColumns     = []string{"id"}
	websitesMessageGeneratedColumns      = []string{"id"}
)

type (
	// WebsitesMessageSlice is an alias for a slice of pointers to WebsitesMessage.
	// This should almost always be used instead of []WebsitesMessage.
	WebsitesMessageSlice []*WebsitesMessage
	// WebsitesMessageHook is the signature for custom WebsitesMessage hook methods
	WebsitesMessageHook func(context.Context, boil.ContextExecutor, *WebsitesMessage) error

	websitesMessageQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	websitesMessageType                 = reflect.TypeOf(&WebsitesMessage{})
	websitesMessageMapping              = queries.MakeStructMapping(websitesMessageType)
	websitesMessagePrimaryKeyMapping, _ = queries.BindMapping(websitesMessageType, websitesMessageMapping, websitesMessagePrimaryKeyColumns)
	websitesMessageInsertCacheMut       sync.RWMutex
	websitesMessageInsertCache          = make(map[string]insertCache)
	websitesMessageUpdateCacheMut       sync.RWMutex
	websitesMessageUpdateCache          = make(map[string]updateCache)
	websitesMessageUpsertCacheMut       sync.RWMutex
	websitesMessageUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var websitesMessageAfterSelectMu sync.Mutex
var websitesMessageAfterSelectHooks []WebsitesMessageHook

var websitesMessageBeforeInsertMu sync.Mutex
var websitesMessageBeforeInsertHooks []WebsitesMessageHook
var websitesMessageAfterInsertMu sync.Mutex
var websitesMessageAfterInsertHooks []WebsitesMessageHook

var websitesMessageBeforeUpdateMu sync.Mutex
var websitesMessageBeforeUpdateHooks []WebsitesMessageHook
var websitesMessageAfterUpdateMu sync.Mutex
var websitesMessageAfterUpdateHooks []WebsitesMessageHook

var websitesMessageBeforeDeleteMu sync.Mutex
var websitesMessageBeforeDeleteHooks []WebsitesMessageHook
var websitesMessageAfterDeleteMu sync.Mutex
var websitesMessageAfterDeleteHooks []WebsitesMessageHook

var websitesMessageBeforeUpsertMu sync.Mutex
var websitesMessageBeforeUpsertHooks []WebsitesMessageHook
var websitesMessageAfterUpsertMu sync.Mutex
var websitesMessageAfterUpsertHooks []WebsitesMessageHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *WebsitesMessage) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range websitesMessageAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *WebsitesMessage) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range websitesMessageBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *WebsitesMessage) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range websitesMessageAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *WebsitesMessage) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range websitesMessageBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *WebsitesMessage) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range websitesMessageAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *WebsitesMessage) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range websitesMessageBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *WebsitesMessage) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range websitesMessageAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *WebsitesMessage) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range websitesMessageBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *WebsitesMessage) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range websitesMessageAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddWebsitesMessageHook registers your hook function for all future operations.
func AddWebsitesMessageHook(hookPoint boil.HookPoint, websitesMessageHook WebsitesMessageHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		websitesMessageAfterSelectMu.Lock()
		websitesMessageAfterSelectHooks = append(websitesMessageAfterSelectHooks, websitesMessageHook)
		websitesMessageAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		websitesMessageBeforeInsertMu.Lock()
		websitesMessageBeforeInsertHooks = append(websitesMessageBeforeInsertHooks, websitesMessageHook)
		websitesMessageBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		websitesMessageAfterInsertMu.Lock()
		websitesMessageAfterInsertHooks = append(websitesMessageAfterInsertHooks, websitesMessageHook)
		websitesMessageAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		websitesMessageBeforeUpdateMu.Lock()
		websitesMessageBeforeUpdateHooks = append(websitesMessageBeforeUpdateHooks, websitesMessageHook)
		websitesMessageBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		websitesMessageAfterUpdateMu.Lock()
		websitesMessageAfterUpdateHooks = append(websitesMessageAfterUpdateHooks, websitesMessageHook)
		websitesMessageAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		websitesMessageBeforeDeleteMu.Lock()
		websitesMessageBeforeDeleteHooks = append(websitesMessageBeforeDeleteHooks, websitesMessageHook)
		websitesMessageBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		websitesMessageAfterDeleteMu.Lock()
		websitesMessageAfterDeleteHooks = append(websitesMessageAfterDeleteHooks, websitesMessageHook)
		websitesMessageAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		websitesMessageBeforeUpsertMu.Lock()
		websitesMessageBeforeUpsertHooks = append(websitesMessageBeforeUpsertHooks, websitesMessageHook)
		websitesMessageBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		websitesMessageAfterUpsertMu.Lock()
		websitesMessageAfterUpsertHooks = append(websitesMessageAfterUpsertHooks, websitesMessageHook)
		websitesMessageAfterUpsertMu.Unlock()
	}
}

// One returns a single websitesMessage record from the query.
func (q websitesMessageQuery) One(ctx context.Context, exec boil.ContextExecutor) (*WebsitesMessage, error) {
	o := &WebsitesMessage{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for websites_messages")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all WebsitesMessage records from the query.
func (q websitesMessageQuery) All(ctx context.Context, exec boil.ContextExecutor) (WebsitesMessageSlice, error) {
	var o []*WebsitesMessage

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to WebsitesMessage slice")
	}

	if len(websitesMessageAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all WebsitesMessage records in the query.
func (q websitesMessageQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count websites_messages rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q websitesMessageQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if websites_messages exists")
	}

	return count > 0, nil
}

// MessageIdMessage pointed to by the foreign key.
func (o *WebsitesMessage) MessageIdMessage(mods ...qm.QueryMod) messageQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.MessageId),
	}

	queryMods = append(queryMods, mods...)

	return Messages(queryMods...)
}

// WebsiteIdWebsite pointed to by the foreign key.
func (o *WebsitesMessage) WebsiteIdWebsite(mods ...qm.QueryMod) websiteQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.WebsiteId),
	}

	queryMods = append(queryMods, mods...)

	return Websites(queryMods...)
}

// LoadMessageIdMessage allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (websitesMessageL) LoadMessageIdMessage(ctx context.Context, e boil.ContextExecutor, singular bool, maybeWebsitesMessage interface{}, mods queries.Applicator) error {
	var slice []*WebsitesMessage
	var object *WebsitesMessage

	if singular {
		var ok bool
		object, ok = maybeWebsitesMessage.(*WebsitesMessage)
		if !ok {
			object = new(WebsitesMessage)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeWebsitesMessage)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeWebsitesMessage))
			}
		}
	} else {
		s, ok := maybeWebsitesMessage.(*[]*WebsitesMessage)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeWebsitesMessage)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeWebsitesMessage))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &websitesMessageR{}
		}
		args[object.MessageId] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &websitesMessageR{}
			}

			args[obj.MessageId] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`messages`),
		qm.WhereIn(`messages.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Message")
	}

	var resultSlice []*Message
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Message")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for messages")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for messages")
	}

	if len(messageAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.MessageIdMessage = foreign
		if foreign.R == nil {
			foreign.R = &messageR{}
		}
		foreign.R.MessageIdWebsitesMessages = append(foreign.R.MessageIdWebsitesMessages, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.MessageId == foreign.ID {
				local.R.MessageIdMessage = foreign
				if foreign.R == nil {
					foreign.R = &messageR{}
				}
				foreign.R.MessageIdWebsitesMessages = append(foreign.R.MessageIdWebsitesMessages, local)
				break
			}
		}
	}

	return nil
}

// LoadWebsiteIdWebsite allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (websitesMessageL) LoadWebsiteIdWebsite(ctx context.Context, e boil.ContextExecutor, singular bool, maybeWebsitesMessage interface{}, mods queries.Applicator) error {
	var slice []*WebsitesMessage
	var object *WebsitesMessage

	if singular {
		var ok bool
		object, ok = maybeWebsitesMessage.(*WebsitesMessage)
		if !ok {
			object = new(WebsitesMessage)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeWebsitesMessage)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeWebsitesMessage))
			}
		}
	} else {
		s, ok := maybeWebsitesMessage.(*[]*WebsitesMessage)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeWebsitesMessage)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeWebsitesMessage))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &websitesMessageR{}
		}
		args[object.WebsiteId] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &websitesMessageR{}
			}

			args[obj.WebsiteId] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`websites`),
		qm.WhereIn(`websites.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Website")
	}

	var resultSlice []*Website
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Website")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for websites")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for websites")
	}

	if len(websiteAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.WebsiteIdWebsite = foreign
		if foreign.R == nil {
			foreign.R = &websiteR{}
		}
		foreign.R.WebsiteIdWebsitesMessages = append(foreign.R.WebsiteIdWebsitesMessages, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.WebsiteId == foreign.ID {
				local.R.WebsiteIdWebsite = foreign
				if foreign.R == nil {
					foreign.R = &websiteR{}
				}
				foreign.R.WebsiteIdWebsitesMessages = append(foreign.R.WebsiteIdWebsitesMessages, local)
				break
			}
		}
	}

	return nil
}

// SetMessageIdMessage of the websitesMessage to the related item.
// Sets o.R.MessageIdMessage to related.
// Adds o to related.R.MessageIdWebsitesMessages.
func (o *WebsitesMessage) SetMessageIdMessage(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Message) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"websites_messages\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"messageId"}),
		strmangle.WhereClause("\"", "\"", 0, websitesMessagePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.MessageId = related.ID
	if o.R == nil {
		o.R = &websitesMessageR{
			MessageIdMessage: related,
		}
	} else {
		o.R.MessageIdMessage = related
	}

	if related.R == nil {
		related.R = &messageR{
			MessageIdWebsitesMessages: WebsitesMessageSlice{o},
		}
	} else {
		related.R.MessageIdWebsitesMessages = append(related.R.MessageIdWebsitesMessages, o)
	}

	return nil
}

// SetWebsiteIdWebsite of the websitesMessage to the related item.
// Sets o.R.WebsiteIdWebsite to related.
// Adds o to related.R.WebsiteIdWebsitesMessages.
func (o *WebsitesMessage) SetWebsiteIdWebsite(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Website) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"websites_messages\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"websiteId"}),
		strmangle.WhereClause("\"", "\"", 0, websitesMessagePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.WebsiteId = related.ID
	if o.R == nil {
		o.R = &websitesMessageR{
			WebsiteIdWebsite: related,
		}
	} else {
		o.R.WebsiteIdWebsite = related
	}

	if related.R == nil {
		related.R = &websiteR{
			WebsiteIdWebsitesMessages: WebsitesMessageSlice{o},
		}
	} else {
		related.R.WebsiteIdWebsitesMessages = append(related.R.WebsiteIdWebsitesMessages, o)
	}

	return nil
}

// WebsitesMessages retrieves all the records using an executor.
func WebsitesMessages(mods ...qm.QueryMod) websitesMessageQuery {
	mods = append(mods, qm.From("\"websites_messages\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"websites_messages\".*"})
	}

	return websitesMessageQuery{q}
}

// FindWebsitesMessage retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindWebsitesMessage(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*WebsitesMessage, error) {
	websitesMessageObj := &WebsitesMessage{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"websites_messages\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, websitesMessageObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from websites_messages")
	}

	if err = websitesMessageObj.doAfterSelectHooks(ctx, exec); err != nil {
		return websitesMessageObj, err
	}

	return websitesMessageObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *WebsitesMessage) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no websites_messages provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(websitesMessageColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	websitesMessageInsertCacheMut.RLock()
	cache, cached := websitesMessageInsertCache[key]
	websitesMessageInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			websitesMessageAllColumns,
			websitesMessageColumnsWithDefault,
			websitesMessageColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, websitesMessageGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(websitesMessageType, websitesMessageMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(websitesMessageType, websitesMessageMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"websites_messages\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"websites_messages\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into websites_messages")
	}

	if !cached {
		websitesMessageInsertCacheMut.Lock()
		websitesMessageInsertCache[key] = cache
		websitesMessageInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the WebsitesMessage.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *WebsitesMessage) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	websitesMessageUpdateCacheMut.RLock()
	cache, cached := websitesMessageUpdateCache[key]
	websitesMessageUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			websitesMessageAllColumns,
			websitesMessagePrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, websitesMessageGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update websites_messages, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"websites_messages\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, websitesMessagePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(websitesMessageType, websitesMessageMapping, append(wl, websitesMessagePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update websites_messages row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for websites_messages")
	}

	if !cached {
		websitesMessageUpdateCacheMut.Lock()
		websitesMessageUpdateCache[key] = cache
		websitesMessageUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q websitesMessageQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for websites_messages")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for websites_messages")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o WebsitesMessageSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), websitesMessagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"websites_messages\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, websitesMessagePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in websitesMessage slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all websitesMessage")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *WebsitesMessage) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no websites_messages provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(websitesMessageColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	websitesMessageUpsertCacheMut.RLock()
	cache, cached := websitesMessageUpsertCache[key]
	websitesMessageUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			websitesMessageAllColumns,
			websitesMessageColumnsWithDefault,
			websitesMessageColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			websitesMessageAllColumns,
			websitesMessagePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert websites_messages, could not build update column list")
		}

		ret := strmangle.SetComplement(websitesMessageAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(websitesMessagePrimaryKeyColumns))
			copy(conflict, websitesMessagePrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"websites_messages\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(websitesMessageType, websitesMessageMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(websitesMessageType, websitesMessageMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert websites_messages")
	}

	if !cached {
		websitesMessageUpsertCacheMut.Lock()
		websitesMessageUpsertCache[key] = cache
		websitesMessageUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single WebsitesMessage record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *WebsitesMessage) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no WebsitesMessage provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), websitesMessagePrimaryKeyMapping)
	sql := "DELETE FROM \"websites_messages\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from websites_messages")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for websites_messages")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q websitesMessageQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no websitesMessageQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from websites_messages")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for websites_messages")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o WebsitesMessageSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(websitesMessageBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), websitesMessagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"websites_messages\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, websitesMessagePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from websitesMessage slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for websites_messages")
	}

	if len(websitesMessageAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *WebsitesMessage) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindWebsitesMessage(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *WebsitesMessageSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := WebsitesMessageSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), websitesMessagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"websites_messages\".* FROM \"websites_messages\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, websitesMessagePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in WebsitesMessageSlice")
	}

	*o = slice

	return nil
}

// WebsitesMessageExists checks if the WebsitesMessage row exists.
func WebsitesMessageExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"websites_messages\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if websites_messages exists")
	}

	return exists, nil
}

// Exists checks if the WebsitesMessage row exists.
func (o *WebsitesMessage) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return WebsitesMessageExists(ctx, exec, o.ID)
}
