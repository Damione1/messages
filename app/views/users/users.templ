package users

import (
	"fmt"
	v "github.com/anthdm/superkit/validate"
	"messages/app/views/components/inputField"
	"messages/app/views/components/modal"
	"messages/app/views/layouts"
	"github.com/invopop/ctxi18n/i18n"
)

templ Index(data *IndexPageData) {
	@layouts.App() {
		<div class="text-center flex flex-col justify-center items-center mt-10 lg:mt-10 mb-10">
			@component_modal.Modal(component_modal.ModalProps{
				OpenButtonTxt:   i18n.T(ctx, "users.invite"),
				OpenButtonClass: "bg-blue-500 hover:bg-gray-700 bg-gray-50 light:bg-gray-200 dark:bg-gray-900 dark:text-gray-400 font-bold py-2 px-4 rounded",
				CloseButtonTxt:  i18n.T(ctx, "users.close"),
			}) {
				<form hx-post="/invitation" class="bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4" id="InvitationForm" hx-target="#InvitationForm" hx-swap="innerHTML">
					@InvitationForm(data.FormValues, data.FormErrors)
				</form>
			}
		</div>
		if len(data.InvitationList) > 0 {
			<h2 class="text-2xl font-semibold text-gray-700 dark:text-gray-400">{i18n.T(ctx, "users.invitations")}</h2>
			@invitationsListing(data.InvitationList)
		}
		<h2 class="text-2xl font-semibold text-gray-700 dark:text-gray-400 mt-10">{i18n.T(ctx, "users.users")}</h2>
		@usersListing(data.UsersList)
	}
}

templ invitationsListing(invitations []*InvitationListItem) {
	<div class="relative overflow-x-auto shadow-md sm:rounded-lg">
		<table class="w-full text-sm text-left rtl:text-right text-gray-500 dark:text-gray-400">
			<thead class="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400">
				<tr>
					<th scope="col" class="px-6 py-3">{i18n.T(ctx, "users.email")}</th>
					<th scope="col" class="px-6 py-3">{i18n.T(ctx, "users.invited_by")}</th>
					<th scope="col" class="px-6 py-3">{i18n.T(ctx, "users.actions")}</th>
				</tr>
			</thead>
			<tbody>
				for _, invitation := range invitations {
					@singleInvitation(invitation)
				}
			</tbody>
		</table>
	</div>
}

templ usersListing(users []*UserListItem) {
	<div class="relative overflow-x-auto shadow-md sm:rounded-lg">
		<table class="w-full text-sm text-left rtl:text-right text-gray-500 dark:text-gray-400">
			<thead class="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400">
				<tr>
					<th scope="col" class="px-6 py-3">{i18n.T(ctx, "users.first_name")}</th>
					<th scope="col" class="px-6 py-3">{i18n.T(ctx, "users.last_name")}</th>
					<th scope="col" class="px-6 py-3">{i18n.T(ctx, "users.email")}</th>
					<th scope="col" class="px-6 py-3">{i18n.T(ctx, "users.role")}</th>
					<th scope="col" class="px-6 py-3">{i18n.T(ctx, "users.actions")}</th>
				</tr>
			</thead>
			<tbody>
				for _, user := range users {
					@singleUser(user)
				}
			</tbody>
		</table>
		if len(users) == 0 {
			<p class="text-gray-500">{i18n.T(ctx, "users.no_users")}</p>
		}
	</div>
}

templ singleUser(user *UserListItem) {
	<tr class="odd:bg-white odd:dark:bg-gray-900 even:bg-gray-50 even:dark:bg-gray-800 border-b dark:border-gray-700">
		<td class="px-6 py-4">{ user.FirstName }</td>
		<td class="px-6 py-4">{ user.LastName }</td>
		<td class="px-6 py-4">{ user.Email }</td>
		<td class="px-6 py-4">{ user.Role }</td>
		<td class="px-6 py-4">
			<button
			hx-delete={ string(fmt.Sprintf("/user/%d", user.ID)) }
			hx-confirm={i18n.T(ctx, "users.delete_user_confirmation")}
			hx-swap="none"
			>{i18n.T(ctx, "users.delete")}</button>
		</td>
	</tr>
}

templ singleInvitation(invitation *InvitationListItem) {
	<tr class="odd:bg-white odd:dark:bg-gray-900 even:bg-gray-50 even:dark:bg-gray-800 border-b dark:border-gray-700">
		<td class="px-6 py-4">{ invitation.Email }</td>
		<td class="px-6 py-4">{ invitation.InvitedBy }</td>
		<td class="px-6 py-4">
			<button
			hx-delete={ string(fmt.Sprintf("/invitation/%d", invitation.ID)) }
			hx-confirm={i18n.T(ctx, "users.delete_invitation_confirmation")}
			hx-swap="none"
			>{i18n.T(ctx, "users.delete")}</button>
		</td>
	</tr>
}

templ InvitationForm(values *InvitationFormValues, errors v.Errors) {
	<div class="mb-4">
		@component_inputfield.InputField(&component_inputfield.InputFieldProps{
			Label:       i18n.T(ctx, "users.email"),
			Name:        "email",
			Value:       "",
			Placeholder: i18n.T(ctx, "users.email_placeholder"),
			Error:       "",
		})
		if errors.Has("email") {
			<div class="text-red-500 text-xs mt-2">{ errors.Get("email")[0] }</div>
		}
	</div>
	<button type="submit" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
		{i18n.T(ctx, "users.invite_user")}
	</button>
	if errors.Has("form") {
		<div class="text-red-500 text-xs mt-2">{ errors.Get("form")[0] }</div>
	}
}
