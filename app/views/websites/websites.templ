package websites

import (
	"messages/app/views/layouts"
	"fmt"
	"messages/app/views/components/modal"
	"messages/app/views/components/inputField"
	v "github.com/anthdm/superkit/validate"
	"messages/app/views/components/checkbox"
)

templ Index(data *IndexPageData) {
	@layouts.App() {
		//create website button
		<div class="text-center flex flex-col justify-center items-center mt-10 lg:mt-10 mb-10">
			@component_modal.Modal(component_modal.ModalProps{
				OpenButtonTxt:   "Add website",
				OpenButtonClass: "bg-blue-500 hover:bg-gray-700 bg-gray-50 light:bg-gray-200 dark:bg-gray-900 dark:text-gray-400 font-bold py-2 px-4 rounded",
				CloseButtonTxt:  "Close",
			}) {
				<form hx-post="/website" class="bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4" id="websiteForm" hx-target="#websiteForm" hx-swap="innerHTML">
					@WebsiteForm(data.FormValues, data.FormErrors)
				</form>
			}
		</div>
		<div class="relative overflow-x-auto shadow-md sm:rounded-lg">
			<table class="w-full text-sm text-left rtl:text-right text-gray-500 dark:text-gray-400">
				<thead class="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400">
					<tr>
						<th scope="col" class="px-6 py-3">Name</th>
						<th scope="col" class="px-6 py-3">Domain</th>
						<th scope="col" class="px-6 py-3">Is Staging?</th>
						<th scope="col" class="px-6 py-3">Actions</th>
					</tr>
				</thead>
				<tbody>
					for _, website := range data.WebsitesList {
						@SingleWebsite(website)
					}
				</tbody>
			</table>
			if len(data.WebsitesList) == 0 {
				<p class="text-gray-500">No websites</p>
			}
		</div>
	}
}

templ PageWebsiteEdit(data *PageWebsiteEditData) {
	@layouts.App() {
		<div class="text-center flex flex-col justify-center items-center lg:mt-10">
			<div class="bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4">
				<form hx-patch={ string(templ.SafeURL(fmt.Sprintf("/website/%d", data.FormValues.ID))) } class="" id="websiteForm" hx-target="#websiteForm" hx-swap="innerHTML">
					@WebsiteForm(data.FormValues, data.FormErrors)
				</form>
				<a href={ templ.SafeURL("/websites") } class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mx-5">Back to websites</a>
			</div>
		</div>
	}
}

templ SingleWebsite(singleWebsite *WebsiteListItem) {
	<tr class="odd:bg-white odd:dark:bg-gray-900 even:bg-gray-50 even:dark:bg-gray-800 border-b dark:border-gray-700">
		<th scope="row" class="px-6 py-4 font-medium text-gray-900 whitespace-nowrap dark:text-white">
			<a href={ templ.SafeURL(fmt.Sprintf("/website/%d", singleWebsite.ID)) }>{ singleWebsite.Name }</a>
		</th>
		<td class="px-6 py-4">{ singleWebsite.Domain }</td>
		<td class="px-6 py-4">
			if singleWebsite.Staging {
				Yes
			} else {
				No
			}
		</td>
		<td class="px-6 py-4 flex">
			<a href={ templ.SafeURL(fmt.Sprintf("/website/%d", singleWebsite.ID)) } class="mr-4">Edit</a>
			@DeleteConfirmationModal(singleWebsite.ID, fmt.Sprintf("/website/%d", singleWebsite.ID))
		</td>
	</tr>
}

templ WebsiteForm(values *WebsiteFormValues, errors v.Errors) {
	<div class="mb-4">
		@component_inputfield.InputField(&component_inputfield.InputFieldProps{
			Label:       "Name",
			Name:        "name",
			Value:       values.Name,
			Placeholder: "Name",
			Error:       "",
		})
		if errors.Has("name") {
			<div class="text-red-500 text-xs mt-2">{ errors.Get("name")[0] }</div>
		}
	</div>
	<div class="mb-4">
		@component_inputfield.InputField(&component_inputfield.InputFieldProps{
			Label:       "Domain",
			Name:        "domain",
			Value:       values.Domain,
			Placeholder: "example.com",
			Error:       "",
		})
		if errors.Has("domain") {
			<div class="text-red-500 text-xs mt-2">{ errors.Get("domain")[0] }</div>
		}
	</div>
	<div class="mb-4">
		@component_checkbox.Checkbox(&component_checkbox.CheckboxProps{
			Label: "Is staging website?",
			Name:  "staging",
			Value: values.Staging,
		})
	</div>
	<button type="submit" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
		{ createOrUpdate( values.ID) }
	</button>
	if errors.Has("form") {
		<div class="text-red-500 text-xs mt-2">{ errors.Get("form")[0] }</div>
	}
}

templ ConfirmationModalContent(props *ConfirmationModalProps) {
	<h3 class="text-lg font-bold">{ props.Title }</h3>
	<p class="block text-gray-700 text-sm font-bold mb-2">{ props.Message }</p>
	<div class="flex items-center justify-between mt-4">
		<button type="submit" class="bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded text-center">{ props.Action }</button>
	</div>
	if props.Errors.Has("form") {
		<div class="text-red-500 text-xs mt-2">{ props.Errors.Get("form")[0] }</div>
	}
}

func GetDefaultConfirmationModalProps() *ConfirmationModalProps {
	return &ConfirmationModalProps{
		Title:   "Delete",
		Message: "Are you sure you want to delete this item?",
		Action:  "Confirm delete",
		Errors:  v.Errors{},
	}
}

func createOrUpdate(id int64) string {
	if id > 0 {
		return "Update"
	}
	return "Create"
}

templ DeleteConfirmationModal(id int64, actionURL string) {
	@component_modal.Modal(component_modal.ModalProps{
		OpenButtonTxt:  "Delete",
		CloseButtonTxt: "Cancel",
	}) {
		<form hx-delete={ actionURL } class="bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4" id={ fmt.Sprintf("deleteWebsite%d", id) } hx-target={ fmt.Sprintf("#deleteWebsite%d", id) } hx-swap="innerHTML">
			@ConfirmationModalContent(GetDefaultConfirmationModalProps())
		</form>
	}
}
