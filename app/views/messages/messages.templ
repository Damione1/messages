package messages

import (
	"messages/app/views/layouts"
	"messages/app/models"
	"time"
	"fmt"
	"messages/app/views/components/modal"
	"messages/app/views/components/textarea"
	"messages/app/views/components/daterange"
	"messages/app/views/components/inputField"
	"messages/app/views/components/selectField"
	v "github.com/anthdm/superkit/validate"
)

type IndexPageData struct {
	MessagesList []*models.Message
	FormValues   MessageFormValues
	FormErrors   v.Errors
}

templ Index(data *IndexPageData) {
	@layouts.App() {
		//create message button
		<div class="text-center flex flex-col justify-center items-center mt-10 lg:mt-32">
			@component_modal.Modal(component_modal.ModalProps{
				OpenButtonTxt:  "Create Message",
				CloseButtonTxt: "Close",
			}) {
				<form hx-post="/message" class="bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4" id="messageForm" hx-target="#messageForm" hx-swap="innerHTML">
					@MessageForm(data.FormValues, data.FormErrors)
				</form>
			}
		</div>
		<div class="text-center flex flex-col justify-center items-center mt-10 lg:mt-32">
			<div class="flex flex-col gap-12">
				for _, message := range data.MessagesList {
					@SingleMessage(message)
				}
			</div>
			if len(data.MessagesList) == 0 {
				<p class="text-gray-500">No messages</p>
			}
		</div>
	}
}

type PageMessageEditData struct {
	FormValues MessageFormValues
	FormErrors v.Errors
}

templ PageMessageEdit(data *PageMessageEditData) {
	@layouts.App() {
		//create message button
		<div class="text-center flex flex-col justify-center items-center mt-10 lg:mt-32">
			<form hx-patch={string(templ.SafeURL(fmt.Sprintf("/message/%d", data.FormValues.ID)))} class="bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4" id="messageForm" hx-target="#messageForm" hx-swap="outerHTML">
				@MessageForm(data.FormValues, data.FormErrors)
			</form>
		</div>
	}
}

templ SingleMessage(singleMessage *models.Message) {
	<div class="text-center flex flex-col justify-center items-center mt-10 lg:mt-32">
		<div class="p-6 rounded-lg shadow-md border border-gray-200 w-full max-w-xl">
			<h2 class="text-2xl font-bold mb-2">
				{ singleMessage.Title }
			</h2>
			<p class="text-gray-700 mb-4">
				{ singleMessage.Message }
			</p>
			<div class="text-gray-500 text-sm">
				<p>From: { singleMessage.DisplayFrom.Format("2006-01-02") }</p>
				<p>To: { singleMessage.DisplayTo.Format("2006-01-02") }</p>
			</div>
		</div>
		<a href={ templ.SafeURL(fmt.Sprintf("/message/%d", singleMessage.ID)) } class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">Edit</a>
		@deleteConfirmationModal( singleMessage.ID)
	</div>
}

type MessageFormValues struct {
	ID            int64 `form:"id"`
	Title         string `form:"title"`
	Message       string `form:"message"`
	Language      string `form:"language"`
	DateRangeFrom string `form:"dateRangeFrom"`
	DateRangeTo   string `form:"dateRangeTo"`
	DateMin       time.Time
	DateMax       time.Time
}

templ MessageForm(values MessageFormValues, errors v.Errors) {
		<div class="mb-4">
			@component_inputfield.InputField(&component_inputfield.InputFieldProps{
				Label:       "Title",
				Name:        "title",
				Value:       values.Title,
				Placeholder: "Title",
				Error:       "",
			})
			if errors.Has("title") {
				<div class="text-red-500 text-xs">{ errors.Get("title")[0] }</div>
			}
		</div>
		<div class="mb-4">
			@component_textarea.Textarea(&component_textarea.TextareaProps{
				Label:       "Message",
				Name:        "message",
				Value:       values.Message,
				Placeholder: "Message",
				Error:       "",
			})
			if errors.Has("message") {
				<div class="text-red-500 text-xs">{ errors.Get("message")[0] }</div>
			}
		</div>
		<div class="mb-4">
			@component_selectField.SelectField(&component_selectField.SelectFieldProps{
				Label:   "Language",
				Name:    "language",
				Placeholder: "Select language",
				Error:   "",
				Options: map[string]string{"fr": "French", "en": "English"},
				Value:   values.Language,
			})
			if errors.Has("language") {
				<div class="text-red-500 text-xs">{ errors.Get("language")[0] }</div>
			}
		</div>
		<div class="mb-4">
			@component_daterange.Daterange(&component_daterange.DaterangeProps{
				Label:    "Display Date Range",
				Name:     "dateRange",
				DateFrom: values.DateRangeFrom,
				DateTo:   values.DateRangeTo,
				DateMin:  values.DateMin,
				DateMax:  values.DateMax,
			})
			if errors.Has("dateRangeFrom") {
				<div class="text-red-500 text-xs">Start date: { errors.Get("dateRangeFrom")[0] }</div>
			}
			if errors.Has("dateRangeTo") {
				<div class="text-red-500 text-xs">End date:{ errors.Get("dateRangeTo")[0] }</div>
			}
		</div>
		//submit button
		<div class="flex items-center justify-between">
			<button type="submit" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
				if values.ID > 0{
					Update
				} else {
					Create
				}
			</button>
		</div>
}


templ deleteConfirmationModal(deleteMessageID int64) {
	@component_modal.Modal(component_modal.ModalProps{
		OpenButtonTxt:  "Delete",
		CloseButtonTxt: "Cancel",
	}) {
		<form hx-delete={ string(fmt.Sprintf("/message/%d", deleteMessageID)) } class="bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4" id="deleteForm" hx-target="#deleteForm" hx-swap="outerHTML">
			<p class="block text-gray-700 text-sm font-bold mb-2">Are you sure you want to delete this message?</p>
			<div class="flex items-center justify-between mt-4">
				<button type="submit" class="bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded text-center">Confirm delete</button>
			</div>
		</form>
	}
}
