package messages

import (
	"messages/app/views/layouts"
	"time"
	"fmt"
	"messages/app/views/components/modal"
	"messages/app/views/components/textarea"
	"messages/app/views/components/daterange"
	"messages/app/views/components/inputField"
	"messages/app/views/components/selectField"
	v "github.com/anthdm/superkit/validate"
	"messages/app/views/websites"
	"messages/app/views/components/multiSelectField"
	"github.com/invopop/ctxi18n/i18n"
)

type IndexPageData struct {
	MessagesList []*MessageListItem
	FormValues   *MessageFormValues
	FormSettings *MessageFormSettings
	Websites     []*websites.WebsiteListItem
	FormErrors   v.Errors
}

templ Index(data *IndexPageData) {
	@layouts.App() {
		<div class="text-center flex flex-col justify-center items-center mt-10 lg:mt-10 mb-10">
			@component_modal.Modal(component_modal.ModalProps{
				OpenButtonTxt:   i18n.T(ctx, "messages.btn.create"),
				OpenButtonClass: "bg-blue-500 hover:bg-gray-700 bg-gray-50 light:bg-gray-200 dark:bg-gray-900 dark:text-gray-400 font-bold py-2 px-4 rounded",
				CloseButtonTxt:  i18n.T(ctx, "messages.btn.close"),
			}) {
				<form hx-post="/message" class="bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4" id="messageForm" hx-target="#messageForm" hx-swap="innerHTML">
					@MessageForm(data.FormValues, data.FormSettings, data.FormErrors)
				</form>
			}
		</div>
		<div class="relative overflow-x-auto shadow-md sm:rounded-lg">
			<table class="w-full text-sm text-left rtl:text-right text-gray-500 dark:text-gray-400">
				<thead class="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400">
					<tr>
						<th scope="col" class="px-6 py-3">{i18n.T(ctx, "messages.table.name")}</th>
						<th scope="col" class="px-6 py-3">{i18n.T(ctx, "messages.table.from")}</th>
						<th scope="col" class="px-6 py-3">{i18n.T(ctx, "messages.table.to")}</th>
						<th scope="col" class="px-6 py-3">{i18n.T(ctx, "messages.table.language")}</th>
						<th scope="col" class="px-6 py-3">{i18n.T(ctx, "messages.table.status")}</th>
						<th scope="col" class="px-6 py-3">{i18n.T(ctx, "messages.table.type")}</th>
						<th scope="col" class="px-6 py-3">{i18n.T(ctx, "messages.table.actions")}</th>
					</tr>
				</thead>
				<tbody>
					for _, message := range data.MessagesList {
						@SingleMessage(message)
					}
				</tbody>
			</table>
			if len(data.MessagesList) == 0 {
				<p class="text-gray-500">{i18n.T(ctx, "messages.table.no_messages")}</p>
			}
		</div>
	}
}

type PageMessageEditData struct {
	FormValues   *MessageFormValues
	FormSettings *MessageFormSettings
	FormErrors   v.Errors
}

templ PageMessageEdit(data *PageMessageEditData) {
	@layouts.App() {
		<div class="text-center flex flex-col justify-center items-center lg:mt-10">
			<form hx-patch={ string(templ.SafeURL(fmt.Sprintf("/message/%d", data.FormValues.ID))) } class="bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4" id="messageForm" hx-target="#messageForm" hx-swap="innerHTML">
				@MessageForm(data.FormValues, data.FormSettings, data.FormErrors)
				<a href={ templ.SafeURL("/messages") } class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mx-5">{i18n.T(ctx, "messages.edit.back")}</a>
			</form>
		</div>
	}
}

type MessageListItem struct {
	ID          int64
	Title       string
	DisplayFrom time.Time
	DisplayTo   time.Time
	Language    string
	Type        string
	Status      string
}

templ SingleMessage(singleMessage *MessageListItem) {
	<tr class="odd:bg-white odd:dark:bg-gray-900 even:bg-gray-50 even:dark:bg-gray-800 border-b dark:border-gray-700">
		<th scope="row" class="px-6 py-4 font-medium text-gray-900 whitespace-nowrap dark:text-white"><a href={ templ.SafeURL(fmt.Sprintf("/message/%d", singleMessage.ID)) } class="">{ singleMessage.Title }</a></th>
		<td class="px-6 py-4">{ singleMessage.DisplayFrom.Format("2006-01-02") }</td>
		<td class="px-6 py-4">{ singleMessage.DisplayTo.Format("2006-01-02") }</td>
		<td class="px-6 py-4">{ singleMessage.Language }</td>
		<td class="px-6 py-4">{ singleMessage.Status }</td>
		<td class="px-6 py-4">{ singleMessage.Type }</td>
		<td class="px-6 py-4">
			<a href={ templ.SafeURL(fmt.Sprintf("/message/%d", singleMessage.ID)) } class="">{i18n.T(ctx, "messages.btn.edit")}</a>
			<button
			hx-delete={ string(fmt.Sprintf("/message/%d", singleMessage.ID)) }
			hx-confirm={i18n.T(ctx, "messages.delete.confirmation_msg")}
			hx-swap="none"
			>{i18n.T(ctx, "messages.btn.delete")}</button>
		</td>
	</tr>
}


type MessageFormSettings struct {
	DateMin  time.Time
	DateMax  time.Time
	Websites map[string]string
}

type MessageFormValues struct {
	ID            int64    `form:"id"`
	Title         string   `form:"title"`
	Message       string   `form:"message"`
	Type          string   `form:"type"`
	Language      string   `form:"language"`
	DateRangeFrom string   `form:"dateRangeFrom"`
	DateRangeTo   string   `form:"dateRangeTo"`
	Websites      []string `form:"websites"`
}

templ MessageForm(values *MessageFormValues, settings *MessageFormSettings, errors v.Errors) {
	<div class="mb-4">
		@component_inputfield.InputField(&component_inputfield.InputFieldProps{
			Label:     	 i18n.T(ctx, "messages.form.title.label"),
			Name:        "title",
			Value:       values.Title,
			Placeholder: i18n.T(ctx, "messages.form.title.placeholder"),
			Error:       "",
		})
		if errors.Has("title") {
			<div class="text-red-500 text-xs mt-2">{ errors.Get("title")[0] }</div>
		}
	</div>
	<div class="mb-4">
		@component_textarea.Textarea(&component_textarea.TextareaProps{
			Label:       i18n.T(ctx, "messages.form.content.label"),
			Name:        "message",
			Value:       values.Message,
			Placeholder: i18n.T(ctx, "messages.form.content.placeholder"),
			Error:       "",
		})
		if errors.Has("message") {
			<div class="text-red-500 text-xs mt-2">{ errors.Get("message")[0] }</div>
		}
	</div>
	<div class="columns-2">
		<div class="mb-4">
			@component_selectField.SelectField(&component_selectField.SelectFieldProps{
				Label:       i18n.T(ctx, "messages.form.type.label"),
				Name:        "type",
				Placeholder: i18n.T(ctx, "messages.form.type.placeholder"),
				Error:       "",
				Options:     map[string]string{
					"danger": i18n.T(ctx, "messages.form.type.values.danger"),
					"info": i18n.T(ctx, "messages.form.type.values.info"),
					"warning": i18n.T(ctx, "messages.form.type.values.warning"),
				},
				Value:       values.Type,
			})
			if errors.Has("type") {
				<div class="text-red-500 text-xs mt-2">{ errors.Get("type")[0] }</div>
			}
		</div>
		<div class="mb-4">
			@component_selectField.SelectField(&component_selectField.SelectFieldProps{
				Label:   	i18n.T(ctx, "messages.form.lang.label"),
				Name:        "language",
				Placeholder: i18n.T(ctx, "messages.form.lang.placeholder"),
				Error:       "",
				Options:     map[string]string{
					"fr": i18n.T(ctx, "messages.form.lang.values.fr"),
					"en": i18n.T(ctx, "messages.form.lang.values.en"),
				},
				Value:       values.Language,
			})
			if errors.Has("language") {
				<div class="text-red-500 text-xs mt-2">{ errors.Get("language")[0] }</div>
			}
		</div>
	</div>
	<div class="mb-4">
		@component_daterange.Daterange(&component_daterange.DaterangeProps{
			Locale: 	i18n.T(ctx, "locale.code"),
			Label:   	i18n.T(ctx, "messages.form.daterange.label"),
			Name:     "dateRange",
			DateFrom: values.DateRangeFrom,
			DateTo:   values.DateRangeTo,
			DateMin:  settings.DateMin,
			DateMax:  settings.DateMax,
		})
		if errors.Has("dateRangeFrom") {
			<div class="text-red-500 text-xs mt-2">{i18n.T(ctx, "messages.errors.from", errors.Get("dateRangeFrom")[0])}</div>
		}
		if errors.Has("dateRangeTo") {
			<div class="text-red-500 text-xs mt-2">{i18n.T(ctx, "messages.errors.to", errors.Get("dateRangeTo")[0])}</div>
		}
	</div>
	<div class="mb-4">
		@component_multiSelectField.MultiSelectField(&component_multiSelectField.MultiSelectFieldProps{
			Label:       i18n.T(ctx, "messages.form.websites.label"),
			Name:        "websites",
			Placeholder: "",
			Error:       "",
			Options:     settings.Websites,
			Values:      values.Websites,
		})
		if errors.Has("websites") {
			<div class="text-red-500 text-xs mt-2">{ errors.Get("websites")[0] }</div>
		}
	</div>
	<button type="submit" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
		if values.ID > 0 {
			{i18n.T(ctx, "messages.btn.update")}
		} else {
			{i18n.T(ctx, "messages.btn.create")}
		}
	</button>
	if errors.Has("form") {
		<div class="text-red-500 text-xs mt-2">{ errors.Get("form")[0] }</div>
	}
}
